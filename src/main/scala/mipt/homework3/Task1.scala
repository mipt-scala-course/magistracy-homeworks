package mipt.homework3

import mipt.utils.Homeworks.TaskSyntax

object Task1 extends App {

  def take[A](l: MyList[A], n: Int): MyList[A] =
    task"""
          Реализуйте метод take, который возвращает n первых элементов исходного списка.
          Для реализации используйте хвостовую рекурсию, методы foldLeft и reverse из класса списка.
          Метод должен работать за линейное время
        """ (1, 1)

  def takeRight[A](l: MyList[A], n: Int): MyList[A] =
    task"""
          Реализуйте метод drop, который возвращает n последних элементов исходного списка.
          Для реализации используйте хвостовую рекурсию, методы foldLeft и reverse из класса списка.
          Метод должен работать за линейное время
        """ (1, 2)

  def takeWhile[A](l: MyList[A], predicate: A => Boolean): MyList[A] =
    task"""
           Реализуйте метод takeWhile, который идет по переданному списку с головы и собирает элементы в новый список до тех пор, пока предикат выполняется.
           Для реализации используйте хвостовую рекурсию, методы foldLeft и reverse из класса списка.
           Метод должен работать за линейное время.
        """ (1, 3)

  def dropWhile[A](l: MyList[A], predicate: A => Boolean): MyList[A] =
    task"""
          Реализуйте метод dropWhile, который отбрасывает элементы исходного списка начиная с головы, пока они удовлетворяют переданному предикату.
          Использовать для реализации хвостовую рекурсию, методы foldLeft и reverse из класса списка.
          Метод должен работать за линейное время
        """ (1, 4)

  def zip[A, B](l1: MyList[A], l2: MyList[B]): MyList[(A, B)] =
    task"""
          Реализуйте метод zip, который из двух списков делает один, объединяя их элементы попарно в анонимный кортеж (tuple).
          Итоговый список должен иметь длину, равную длине более короткого списка, элементы из хвоста длинного списка игнорируются.
          Для реализации использовать хвостовую рекурсию, методы foldLeft и reverse из класса списка.
          Метод должен работать за линейное время
        """ (1, 5)

}